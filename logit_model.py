# Оценка Факторной нагрузки с помощью Логистической регрессии (или логит-модели)

import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt

# Фиксируем сид для воспроизводимости
np.random.seed(42)

# Генерируем случайные бинарные значения (0 или 1) для целевой переменной и предикторов
# data = pd.DataFrame({
#     "Y": np.random.randint(0, 2, 50),  # Нарушение (целевая переменная)
#     "X1": np.random.randint(0, 2, 50),  # Группа людей (предиктор 1)
#     "X2": np.random.randint(0, 2, 50),  # Время 12-18 (предиктор 2)
#     "X3": np.random.randint(0, 2, 50),  # Машина рядом (предиктор 3)
# })

# data = pd.DataFrame({
#     "Y":  [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Нарушение
#     "X1": [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0],  # Человек один (нет группы людей)
#     "X2": [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0],  # Время 12-18
#     "X3": [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0],  # Машина рядом
# })

data = pd.DataFrame({
    "Y":  [1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],  # Нарушение
    "X1": [0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],  # Человек один (нет группы людей)
    "X2": [0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1],  # Машина рядом
    "X3": [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  # Время 12-18
})

print("\n=======Выводим первые 5 строк=======\n")
print(data.head(5))  # Проверяем первые 5 строк

# Добавляем константу для регрессии
X = sm.add_constant(data[["X1", "X2", "X3"]])  # Предикторы + константа
y = data["Y"]  # Целевая переменная

# Обучаем логистическую регрессию
model = sm.Logit(y, X)
result = model.fit()

# Выводим коэффициенты регрессии
result.summary()

# Коэффициенты модели
print("\n=======Коэффициенты модели=======\n")
print(result.params)

# Экспоненцирование коэффициентов модели (Odds Ratio)
print("\n=======Odds Ratio коэффициентов модели=======\n")
print(np.exp(result.params))

print("\n=======Предсказания модели=======\n")
# Предсказания модели
predictions = result.predict(X)
print("\n=================================\n")

# График
plt.figure(figsize=(8, 5))
plt.scatter(range(len(predictions)), predictions, label='Predicted Probability', color='blue', alpha=0.6)
plt.axhline(y=0.5, color='red', linestyle='--', label='Decision Boundary (0.5)')
plt.xlabel("Observation Index")
plt.ylabel("Predicted Probability")
plt.title("Predictions of Logistic Regression")
plt.legend()
plt.grid(True)
plt.show()